#!/usr/bin/env python3
"""Rips all samples contained by a specified MOD music file to WAV."""

import argparse
from pathlib import Path
import wave

def get_sample_data(sample_bytes):
    """Returns a dictionary of the sample's data extracted from sample_bytes"""
    assert(len(sample_bytes) == 30)
    sample = {}
    sample["name"] = sample_bytes[:22].strip(b'\x00\x0e').decode('utf-8').strip()
    sample["length"] = int.from_bytes(sample_bytes[22:24], 'big') * 2
    finetune_value = int.from_bytes(sample_bytes[24:25], 'big') & 0x0F
    # convert from base-16 to a signed nibble (-8..7)
    if finetune_value > 7:
        sample["finetune"] = finetune_value - 16
    else:
        sample["finetune"] = finetune_value
    sample["volume"] = int.from_bytes(sample_bytes[25:26], 'big')
    sample["loop_offset"] = int.from_bytes(sample_bytes[26:28], 'big')
    sample["loop_length"] = int.from_bytes(sample_bytes[28:30], 'big')
    return sample

def get_number_of_channels(identifier):
    number_of_channels = 0
    if identifier in [b'M.K.', b'M!K!', b'FLT4']:
        number_of_channels = 4
    elif identifier in [b'6CHN']:
        number_of_channels = 6
    elif identifier in [b'8CHN', b'CD81', b'OKTA', b'OCTA', b'FLT8']:
        number_of_channels = 8
    elif identifier in [b'2CHN']:
        number_of_channels = 2
    assert(number_of_channels > 0)
    return number_of_channels

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('mod_file', type=Path)
    args = parser.parse_args()
    with open(args.mod_file, 'rb') as file:
        print(args.mod_file)
        mod_file = {}
        mod_file["title"] = file.read(20).decode('utf-8')
        print("TITLE: " + mod_file["title"])
        mod_file["samples"] = []
        for i in range(31):
            sample = get_sample_data(file.read(30))
            mod_file["samples"].append(sample)
        file.read(1) # number of song positions
        file.read(1) # this byte can be ignored
        mod_file["number_of_patterns"] = 0
        for i in range(128):
            pattern = int.from_bytes(file.read(1), 'big')
            if pattern > mod_file["number_of_patterns"]:
                mod_file["number_of_patterns"] = pattern
        identifier = file.read(4)
        mod_file["number_of_channels"] = get_number_of_channels(identifier)
        print(str(identifier) + " - " + str(mod_file["number_of_channels"]) + " channels")
        for i in range(mod_file["number_of_patterns"] + 1): # skip pattern data
            file.read(256 * mod_file["number_of_channels"])
        for i in range(len(mod_file["samples"])):
            sample = mod_file["samples"][i]
            if sample["length"] > 0:
                sample_file_name = str(i)
                if sample["name"] != "":
                    sample_file_name += " - " + sample["name"]
                keepcharacters = (' ','.','_','-')
                sample_file_name = "".join(c for c in sample_file_name if
                                           c.isalnum() or c in
                                           keepcharacters).rstrip()
                print("[Exporting Sample] " + sample_file_name)
                out = wave.open(sample_file_name + ".wav", "wb")
                out.setnchannels(1)
                out.setsampwidth(2)
                # Amiga Paula clock rate closest to C at 8372Hz
                out.setframerate(8363)
                out.writeframes(file.read(sample["length"]))
                out.close()


if __name__ == '__main__':
    main()
