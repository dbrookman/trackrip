#!/usr/bin/env python3
"""Rips all samples containd by a specified MOD format music file to WAV."""

import argparse
from pathlib import Path
import wave

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('mod_file', type=Path)
    args = parser.parse_args()
    with open(args.mod_file, 'rb') as file:
        mod_file = {}
        mod_file["title"] = file.read(20).decode('utf-8')
        mod_file["samples"] = []
        for i in range(31):
            sample = {}
            sample["name"] = file.read(22).strip(b'\x00\x0e').decode('utf-8').strip()
            sample["length"] = int.from_bytes(file.read(2), 'big') * 2
            finetune_value = int.from_bytes(file.read(1), 'big') & 0x0F
            # convert from base-16 to a signed nibble (-8..7)
            if finetune_value > 7:
                sample["finetune"] = finetune_value - 16
            else:
                sample["finetune"] = finetune_value
            sample["volume"] = int.from_bytes(file.read(1), 'big')
            sample["loop_offset"] = int.from_bytes(file.read(2), 'big')
            sample["loop_length"] = int.from_bytes(file.read(2), 'big')
            mod_file["samples"].append(sample)
        file.read(1) # number of song positions
        file.read(1) # this byte can be ignored
        mod_file["number_of_patterns"] = 0
        for i in range(128):
            pattern = int.from_bytes(file.read(1), 'big')
            if pattern > mod_file["number_of_patterns"]:
                mod_file["number_of_patterns"] = pattern
        file.read(4) # these bytes can be ignored
        for i in range(mod_file["number_of_patterns"] + 1): # skip pattern data
            file.read(1024)
        for i in range(len(mod_file["samples"])):
            sample = mod_file["samples"][i]
            if sample["length"] > 0:
                sample_file_name = str(i)
                if sample["name"] != "":
                    sample_file_name += " - " + sample["name"]
                print("[Exporting Sample] " + sample_file_name)
                out = wave.open(sample_file_name + ".wav", "wb")
                out.setnchannels(1)
                out.setsampwidth(2)
                # Amiga Paula clock rate closest to C at 8372Hz
                out.setframerate(8363)
                out.writeframes(file.read(sample["length"]))
                out.close()


if __name__ == '__main__':
    main()
